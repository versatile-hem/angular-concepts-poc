{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, useLazyRef } from \"./internal/index.js\";\nexport function useFragment(options) {\n  var cache = useApolloClient().cache;\n  var diffOptions = useDeepMemo(function () {\n    var fragment = options.fragment,\n      fragmentName = options.fragmentName,\n      from = options.from,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n    return __assign(__assign({}, rest), {\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    });\n  }, [options]);\n  var resultRef = useLazyRef(function () {\n    return diffToResult(cache.diff(diffOptions));\n  });\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return resultRef.current;\n  }, []);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var unsubscribe = cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff.result, resultRef.current.data)) {\n          resultRef.current = diffToResult(diff);\n          // If we get another update before we've re-rendered, bail out of\n          // the update and try again. This ensures that the relative timing\n          // between useQuery and useFragment stays roughly the same as\n          // fixed in https://github.com/apollographql/apollo-client/pull/11083\n          clearTimeout(lastTimeout);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      }\n    }));\n    return function () {\n      unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [cache, diffOptions]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}\n//# sourceMappingURL=useFragment.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}